0. Overview
=============
Serial Peripheral Interface (SPI) is a synchronous serial communication protocol used to transfer data between a 
master device and one or more slave devices. It is commonly used in embedded systems and microcontroller applications 
for interforing with sensors, memory devices, and other peripherals. 

1. Key Features
================
Synchronous Communication: SPI uses a clock signal to synchronize data transfer between devices.
Full-Duplex: Data can be transmitted and received simultaneously, allowing for high-speed communication.
Master-Slave Architecture: One master device controls the communication and one or more slave devices are connected to the master.


2. SPI Signals
================
MOSI (Master Out Slave In): The line used to send data from the master to the slave.
MISO (Master In Slave Out): The line used to send data from the slave to the master.
SCLK (Serial Clock): The clock line generated by the master to synchronize the data transfer.
SS/CS (Slave Select/Chip Select): The line used by the master to select the slave device for communication. 
This line is active-low and can be used to enable or disable specific slaves.

3. Advantages
===============
High-Speed Data Transfer: SPI can achieve higher data rates compared to other serial protocols like I²C.
Full-Duplex Communication: Allows simultaneous sending and receiving of data.
Simple Protocol: Straightforward protocol with minimal overhead.

4. Disadvantages
=================
No Built-in Error Checking: SPI does not include built-in mechanisms for error detection and correction.
Multiple Chip Select Lines: When using multiple slave devices, each requires its own chip select line, which can lead to increased pin usage on the master device.
No Acknowledgment: SPI does not provide an acknowledgment mechanism, so there’s no built-in method to confirm successful data receipe

5. Applications
=================
Memory Devices: Communicating with EEPROMs, Flash memory, and other storage devices.
Sensors: Interfacing with analog-to-digital converters (ADCs), digital-to-analog converters (DACs), and various sensors.
Displays: Driving graphical and character LCDs.

6. SPI Master Code (Arduino)
=============================
#include <SPI.h>

void setup() {
  // Start the Serial Monitor
  Serial.begin(9600);

  // Set the SS (Slave Select) pin as output
  pinMode(SS, OUTPUT);

  // Ensure SS is high before beginning
  digitalWrite(SS, HIGH);

  // Initialize the SPI library
  SPI.begin();

  // Set SPI settings: clock speed, bit order, and data mode
  SPI.beginTransaction(SPISettings(1000000, MSBFIRST, SPI_MODE0));
}

void loop() {
  // Pull SS low to select the slave
  digitalWrite(SS, LOW);

  // Send a byte to the slave device and read the response
  byte dataToSend = 0x42;  // Example data byte to send
  byte receivedData = SPI.transfer(dataToSend);

  // Pull SS high to deselect the slave
  digitalWrite(SS, HIGH);

  // Print the received data to the Serial Monitor
  Serial.print("Sent: 0x");
  Serial.print(dataToSend, HEX);
  Serial.print(", Received: 0x");
  Serial.println(receivedData, HEX);

  // Wait before sending again
  delay(1000);
}

Explanation of the Code
--------------------------
SPI.begin(): Initializes the SPI bus.
pinMode(SS, OUTPUT): Sets the Slave Select pin as an output so that the master can control the connection to the slave.
SPI.beginTransaction(SPISettings(1000000, MSBFIRST, SPI_MODE0)): Configures the SPI settings. The parameters are:
Clock speed: 1 MHz in this example.
Bit order: Most Significant Bit first.
SPI mode: Mode 0 (CPOL = 0, CPHA = 0).
digitalWrite(SS, LOW): Pulls the SS line low to enable communication with the slave.
SPI.transfer(dataToSend): Sends the dataToSend byte to the slave and simultaneously receives a byte from the slave.
digitalWrite(SS, HIGH): Pulls the SS line high to end communication with the slave.
Serial.print: Sends the results to the Serial Monitor for observation.


7. Arduino SPI Slave Code (Optional)
=====================================
#include <SPI.h>

volatile byte receivedData;
volatile byte dataToSend = 0x37;  // Example response byte

void setup() {
  // Start the Serial Monitor
  Serial.begin(9600);

  // Set MISO as output, all others are inputs
  pinMode(MISO, OUTPUT);

  // Enable SPI in Slave mode
  SPCR |= _BV(SPE);

  // Enable SPI interrupts
  SPI.attachInterrupt();
}

ISR(SPI_STC_vect) {
  // SPI interrupt routine, triggered on data reception
  receivedData = SPDR;  // Read received data
  SPDR = dataToSend;    // Send next data byte
}

void loop() {
  // Print the received data to the Serial Monitor
  Serial.print("Received: 0x");
  Serial.println(receivedData, HEX);

  delay(1000);  // Adjust the delay as needed
}

SPCR |= _BV(SPE): Enables SPI in Slave mode.
SPI.attachInterrupt(): Attaches an interrupt that triggers when data is received.
ISR(SPI_STC_vect): The interrupt service routine (ISR) that handles received data and sends a response.
SPDR: The SPI Data Register, where received data is stored and from where data to be sent is loaded.

MOSI (Master Out Slave In): Connects to MOSI on both master and slave.
MISO (Master In Slave Out): Connects to MISO on both master and slave.
SCLK (Serial Clock): Connects to SCLK on both master and slave.
SS (Slave Select): The master connects its SS pin to the slave's SS pin (slave’s SS must be pulled low to select it).


Master Code: Sends data to the slave and reads the response.
Slave Code: Receives data from the master and sends a predefined response back.
SPI Setup: You need to wire the master and slave correctly, matching their respective MOSI, MISO, SCLK, and SS pins.
